{"version":3,"file":"main~a51fa3f5.bundle.js","mappings":";mZACA,8hGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,kkBAEA,IAAQC,EAAuDC,EAAAA,EAAAA,cAAxCC,EAAwCD,EAAAA,EAAAA,iBAAtBE,EAAsBF,EAAAA,EAAAA,kBAEzDG,GAAYC,EAAAA,EAAAA,IAAOL,EAAeE,EAAkB,CACxDI,QADwD,SAChDC,GACNA,EAASC,kBAAkBL,EAAmB,CAAEM,QAAS,MAC1D,IAyBH,QAtB8B,CACtBC,cADsB,SACRC,GAAI,oGAClBA,EADkB,iEAIRP,EAJQ,uCAIGQ,IAAIT,EAAmBQ,IAJ1B,4CAKvB,EAEKE,iBARsB,WAQH,iHACTT,EADS,uCACEU,OAAOX,IADT,4CAExB,EACKY,cAXsB,SAWRC,GAAY,oGACzBA,EAAWC,eAAe,MADD,iEAIhBb,EAJgB,uCAILc,IAAIf,EAAmBa,IAJlB,4CAK/B,EACKG,iBAjBsB,SAiBLR,GAAI,iHACXP,EADW,8CACOD,EAAmBQ,IAD1B,4CAE1B,+CCvBH,QALqB,CACnBS,QAAS,GAAF,OAAKnB,EAAAA,EAAAA,SAAL,QACPoB,OAAQ,SAACV,GAAD,gBAAWV,EAAAA,EAAAA,SAAX,kBAAoCU,EAApC,sPCHV,8hGAAAZ,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,wuBA0BA,QAxBMuB,mMACJ,sGACyBC,MAAMC,EAAAA,SAD/B,cACQC,EADR,gBAE6BA,EAASC,OAFtC,cAEQC,EAFR,yBAGSA,EAAaC,aAHtB,qIAMA,WAA8BjB,GAA9B,uFACyBY,MAAMC,EAAAA,OAAoBb,IADnD,cACQc,EADR,yBAESA,EAASC,QAFlB,gIAKA,WAAwBG,GAAxB,iEACEN,MAAMtB,EAAAA,EAAAA,gBAAwB,CAC5B6B,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUL,KACpBM,MAAK,SAACV,GAAD,OAAcA,EAASC,MAAvB,IACLS,MAAK,SAACC,GAAD,OAAUC,QAAQC,IAAIF,EAAtB,IARV,yJAZId,mCCQN,QAXe,CACbiB,SAAU,uCACVC,eAAgB,oDAChBC,gBAAiB,6CACjBC,iBAAkB,QAClBC,YAAY,IAAIC,MAAOC,cACvB7C,cAAe,gCACfE,iBAAkB,EAClBC,kBAAmB,yECFf2C,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQC,SAASC,cAAc,oBAC/BC,OAAQF,SAASC,cAAc,qBAC/BE,QAASH,SAASC,cAAc,kBAGlCG,OAAOC,iBAAiB,cAAc,WACpCR,EAAIS,YACL,IAEDF,OAAOC,iBAAiB,QAAQ,WAC9BR,EAAIS,cACJC,EAAAA,EAAAA,IACD","sources":["webpack://restaurant-catalogue/./src/scripts/data/favorite-restaurant-idb.js","webpack://restaurant-catalogue/./src/scripts/globals/api-endpoint.js","webpack://restaurant-catalogue/./src/scripts/data/restaurantdb-source.js","webpack://restaurant-catalogue/./src/scripts/globals/config.js","webpack://restaurant-catalogue/./src/scripts/index.js"],"sourcesContent":["import { openDB } from 'idb';\r\nimport CONFIG from '../globals/config';\r\n\r\nconst { DATABASE_NAME, DATABASE_VERSION, OBJECT_STORE_NAME } = CONFIG;\r\n\r\nconst dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\r\n  upgrade(database) {\r\n    database.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });\r\n  },\r\n});\r\n\r\nconst FavoriteRestaurantIdb = {\r\n  async getRestaurant(id) {\r\n    if(!id){\r\n      return;\r\n    }\r\n    return (await dbPromise).get(OBJECT_STORE_NAME, id);\r\n  },\r\n  \r\n  async getAllRestaurant() {\r\n    return (await dbPromise).getAll(OBJECT_STORE_NAME);\r\n  },\r\n  async putRestaurant(Restaurant) {\r\n    if (!Restaurant.hasOwnProperty('id')) {\r\n      return;\r\n    }\r\n    return (await dbPromise).put(OBJECT_STORE_NAME, Restaurant);\r\n  },\r\n  async deleteRestaurant(id) {\r\n    return (await dbPromise).delete(OBJECT_STORE_NAME, id);\r\n  },\r\n};\r\n\r\nexport default FavoriteRestaurantIdb;\r\n","import CONFIG from './config';\r\n\r\nconst API_ENDPOINT = {\r\n  BERANDA: `${CONFIG.BASE_URL}list`,\r\n  DETAIL: (id) => `${CONFIG.BASE_URL}detail/${id}`,\r\n};\r\n\r\nexport default API_ENDPOINT;\r\n","import API_ENDPOINT from '../globals/api-endpoint';\r\nimport CONFIG from '../globals/config';\r\n\r\nclass RestaurantDb {\r\n  static async beranda() {\r\n    const response = await fetch(API_ENDPOINT.BERANDA);\r\n    const responseJson = await response.json();\r\n    return responseJson.restaurants;\r\n  }\r\n\r\n  static async detailRestaurant(id) {\r\n    const response = await fetch(API_ENDPOINT.DETAIL(id));\r\n    return response.json();\r\n  }\r\n\r\n  static async postReview(review) {\r\n    fetch(CONFIG.BASE_URL_REVIEW, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(review),\r\n    }).then((response) => response.json())\r\n      .then((data) => console.log(data));\r\n  }\r\n}\r\n\r\nexport default RestaurantDb;\r\n","const CONFIG = {\r\n  BASE_URL: 'https://restaurant-api.dicoding.dev/',\r\n  BASE_IMAGE_URL: 'https://restaurant-api.dicoding.dev/images/large/',\r\n  BASE_URL_REVIEW: 'https://restaurant-api.dicoding.dev/review',\r\n  DEFAULT_LANGUAGE: 'en-us',\r\n  CACHE_NAME: new Date().toISOString(),\r\n  DATABASE_NAME: 'restaurant-catalogue-database',\r\n  DATABASE_VERSION: 1,\r\n  OBJECT_STORE_NAME: 'restaurants',\r\n};\r\n\r\nexport default CONFIG;\r\n","import 'regenerator-runtime';\r\nimport '../styles/style.css';\r\nimport '../styles/responsive.css';\r\nimport App from './views/app';\r\nimport swRegister from './utils/sw-register';\r\n\r\nconst app = new App({\r\n  button: document.querySelector('#hamburgerButton'),\r\n  drawer: document.querySelector('#navigationDrawer'),\r\n  content: document.querySelector('#mainContent'),\r\n});\r\n\r\nwindow.addEventListener('hashchange', () => {\r\n  app.renderPage();\r\n});\r\n\r\nwindow.addEventListener('load', () => {\r\n  app.renderPage();\r\n  swRegister();\r\n});\r\n"],"names":["i","DATABASE_NAME","CONFIG","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","openDB","upgrade","database","createObjectStore","keyPath","getRestaurant","id","get","getAllRestaurant","getAll","putRestaurant","Restaurant","hasOwnProperty","put","deleteRestaurant","BERANDA","DETAIL","RestaurantDb","fetch","API_ENDPOINT","response","json","responseJson","restaurants","review","method","headers","body","JSON","stringify","then","data","console","log","BASE_URL","BASE_IMAGE_URL","BASE_URL_REVIEW","DEFAULT_LANGUAGE","CACHE_NAME","Date","toISOString","app","App","button","document","querySelector","drawer","content","window","addEventListener","renderPage","swRegister"],"sourceRoot":""}